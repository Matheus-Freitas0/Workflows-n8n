{
    "name": "Presente Natal 03 - Call Center",
    "nodes": [
      {
        "parameters": {
          "model": "gpt-4o-2024-08-06",
          "options": {}
        },
        "id": "ebc7ed3b-6bab-44a8-859c-81c76b83baab",
        "name": "OpenAI Chat Model",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1,
        "position": [
          920,
          820
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "sessionIdType": "customKey",
          "sessionKey": "={{ $node[\"Telegram Trigger\"].json.message.chat.id }}",
          "contextWindowLength": 4
        },
        "id": "98e7a15c-7dd4-4ecc-bf74-e2d51a26b560",
        "name": "Window Buffer Memory",
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "typeVersion": 1.2,
        "position": [
          1060,
          820
        ]
      },
      {
        "parameters": {
          "name": "send_email",
          "description": "Call this tool to send an email",
          "workflowId": {
            "__rl": true,
            "value": "EurddQCMdepMwI1t",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è send_email"
          },
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n    \"query\": \"{\\\"sendTo\\\":\\\"=\\\",\\\"subject\\\":\\\"=\\\",\\\"message\\\":\\\"=\\\",\\\"ccList\\\":\\\"=\\\"}\"\n}"
        },
        "id": "4ee2771b-8412-4183-8752-46c5fba4c292",
        "name": "send_email",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1580,
          960
        ]
      },
      {
        "parameters": {
          "name": "retrieve_unread_emails",
          "description": "Call this tool to retrieve all unread emails.",
          "workflowId": {
            "__rl": true,
            "value": "GE8OrTQl6P5YbOQJ",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è retrieve_unread_emails"
          }
        },
        "id": "e75d4256-ed9c-46c7-9ee8-10709738d495",
        "name": "retrieve_unread_emails",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1580,
          1120
        ]
      },
      {
        "parameters": {
          "name": "get_todays_meetings",
          "description": "Call this tool to get today's meetings from the calendar. ",
          "workflowId": {
            "__rl": true,
            "value": "AVYDOlK3Q8SrNzEF",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è get_today's_meetings"
          }
        },
        "id": "70afedf5-0741-4cb6-bda2-2a63b056d023",
        "name": "get_todays_meetings",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1740,
          1120
        ]
      },
      {
        "parameters": {
          "name": "create_calendar_event",
          "description": "Call this tool to create a calendar a event / meeting",
          "workflowId": {
            "__rl": true,
            "value": "hVTTLr18sMzmnMjU",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è create_calendar_event"
          },
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n  \"query\": \"{\\\"start\\\":\\\"=\\\",\\\"end\\\":\\\"=\\\",\\\"attendees\\\":\\\"=\\\",\\\"description\\\":\\\"=\\\",\\\"summary\\\":\\\"=\\\"}\"\n}\n"
        },
        "id": "fcac6526-8331-47e4-b478-4b7ff0567b7b",
        "name": "create_calendar_event",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1740,
          960
        ]
      },
      {
        "parameters": {
          "name": "add_to_do_task",
          "description": "Call this tool to add a to-do task to tasks lists",
          "workflowId": {
            "__rl": true,
            "value": "yzhMxTaeATUfPUu7",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è add_to_do_task"
          },
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n  \"query\": \"{\\\"title\\\":\\\"=\\\",\\\"date\\\":\\\"=\\\",\\\"Tags\\\":\\\"=\\\"}\"\n}"
        },
        "id": "d8a99737-2859-4717-8502-f257116babac",
        "name": "add_to_do_task",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1900,
          960
        ]
      },
      {
        "parameters": {
          "name": "get_todays_tasks",
          "description": "Call this tool to retrieve all the tasks for today. ",
          "workflowId": {
            "__rl": true,
            "value": "mrAX1admoaRBhwsN",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è get_today's_tasks"
          }
        },
        "id": "75972983-0914-48b0-8ec8-b8efd41e8275",
        "name": "get_todays_tasks",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1900,
          1120
        ]
      },
      {
        "parameters": {
          "name": "database",
          "description": "Call this tool to retrieve contact information like email addresses. ",
          "topK": 3
        },
        "id": "8f70d919-a017-4754-b4a5-251c1be66c6c",
        "name": "database",
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "typeVersion": 1,
        "position": [
          1000,
          1000
        ]
      },
      {
        "parameters": {
          "model": "gpt-4o",
          "options": {}
        },
        "id": "11c00d55-293c-4172-aacf-68f36a93e4b9",
        "name": "OpenAI Chat Model1",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1,
        "position": [
          1180,
          1140
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "model": "text-embedding-3-small",
          "options": {}
        },
        "id": "9485208c-7e2f-4c23-8595-5d8e59c26af8",
        "name": "Embeddings OpenAI",
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "typeVersion": 1,
        "position": [
          980,
          1280
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "updates": [
            "message"
          ],
          "additionalFields": {}
        },
        "id": "f8ff4a45-8b66-463a-8307-0939d6730c1b",
        "name": "Telegram Trigger",
        "type": "n8n-nodes-base.telegramTrigger",
        "typeVersion": 1.1,
        "position": [
          -60,
          660
        ],
        "webhookId": "239fe399-80f1-4e83-8d7e-2ae67f7c2495",
        "credentials": {
          "telegramApi": {
            "id": "V0KQX7C7AlGC9ADm",
            "name": "Telegram account"
          }
        }
      },
      {
        "parameters": {
          "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
          "text": "={{ $json.output }}",
          "additionalFields": {
            "appendAttribution": false,
            "parse_mode": "MarkdownV2"
          }
        },
        "id": "6a49491b-7392-4ab2-8048-ce772cb3faad",
        "name": "Telegram",
        "type": "n8n-nodes-base.telegram",
        "typeVersion": 1.2,
        "position": [
          1620,
          640
        ],
        "credentials": {
          "telegramApi": {
            "id": "V0KQX7C7AlGC9ADm",
            "name": "Telegram account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 1
            },
            "conditions": [
              {
                "id": "d8e20c4a-b564-41db-928b-924fbc4c863e",
                "leftValue": "={{ $json.message.text }}",
                "rightValue": "^$",
                "operator": {
                  "type": "string",
                  "operation": "regex"
                }
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "82e13bcf-6ce1-40f7-9f2f-602e25066455",
        "name": "If",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          260,
          660
        ]
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "9af8035e-09f4-4445-858b-ad403b6bf930",
                "name": "message.text",
                "value": "={{ $json?.message?.text || \"\" }}",
                "type": "string"
              },
              {
                "id": "510cd2fb-92c7-4616-91c9-3be4fdfc3dc7",
                "name": "today",
                "value": "={{ $now.format('yyyy-MM-dd')}}",
                "type": "string"
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "id": "6b6d7eb2-a08f-4d8c-82b6-1a6a209601e3",
        "name": "Edit Fields",
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          100,
          660
        ]
      },
      {
        "parameters": {
          "resource": "file",
          "fileId": "={{ $json.message.voice.file_id }}"
        },
        "id": "71996834-cd47-42d9-ae7b-083627dd386f",
        "name": "Telegram1",
        "type": "n8n-nodes-base.telegram",
        "typeVersion": 1.2,
        "position": [
          460,
          460
        ],
        "credentials": {
          "telegramApi": {
            "id": "V0KQX7C7AlGC9ADm",
            "name": "Telegram account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "9af8035e-09f4-4445-858b-ad403b6bf930",
                "name": "message.text",
                "value": "={{ $json.text }}",
                "type": "string"
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "id": "5a6d4314-db87-462d-a884-ae5e5e797a21",
        "name": "Edit Fields1",
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          860,
          460
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "let message = $json.output; // The text you want to send\n\n// Escape special characters for MarkdownV2\nmessage = message.replace(/([_*[\\]()~`>#+-=|{}.!])/g, '\\\\$1');\n\nreturn {\n  json: {\n    output: message\n  }\n};\n"
        },
        "id": "79e5da1a-2a78-4c8a-9503-e75db84e664c",
        "name": "Code",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1420,
          640
        ]
      },
      {
        "parameters": {
          "name": "make_phone_call",
          "description": "Call this tool to make a phone call to someone. ",
          "workflowId": {
            "__rl": true,
            "value": "a89AXs42m9ctuD1W",
            "mode": "list",
            "cachedResultName": "üõ†Ô∏è Vapi Call"
          },
          "specifyInputSchema": true,
          "schemaType": "manual",
          "inputSchema": "{\n    \"query\": \"{\\\"first_name\\\":\\\"=\\\",\\\"type\\\":\\\"=\\\",\\\"instructions\\\":\\\"=\\\",\\\"phone_number\\\":\\\"=\\\"}\"\n}"
        },
        "id": "cec14a3b-5060-4423-9b36-09893df3e7f2",
        "name": "make_phone_call",
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "typeVersion": 1.2,
        "position": [
          1580,
          1300
        ]
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $json.message.text }}",
          "options": {
            "systemMessage": "=**Objective**: \nThe AI Agent's goal is to act as an intelligent assistant, responding to incoming chat messages and performing a range of actions based on user queries. It should retrieve data from connected tools, manage tasks, send emails, and create calendar events while maintaining a conversational flow. The agent is designed to support productivity by leveraging integrated services to automate daily tasks.\n\n**Context**:\nThe AI Agent is part of an automation workflow that activates whenever a new chat message is received. The user interacts with the AI agent via chat, which can handle commands related to email, tasks, meetings, and general inquiries. The system utilizes a buffer memory to maintain context across interactions. The tools connected include retrieving unread emails, getting today‚Äôs meetings and tasks, creating calendar events, and sending emails. The agent needs to interpret user commands and act by invoking the correct tool.\n\n**Detailed Instructions**:\n1. **Receive Chat Message**:\n   - Upon receiving a message, parse the user's request to understand the intent.\n   - Determine which action(s) to trigger based on keywords or commands (e.g., \"show unread emails,\" \"add task,\" \"create meeting\").\n\n2. **Invoke Tools Based on User Command**:\n   - If the user asks to send an email, trigger the **send_email** tool and follow up with prompts for the email recipient, subject, and content.\n   - If the user asks to check unread emails, invoke the **retrieve_unread_emails** tool to fetch and display unread emails.\n   - If the user requests task management, use the **get_todays_tasks** or **add_to_do_task** tools to fetch today‚Äôs tasks or add a new task to the list.\n   - For meeting-related requests, utilize the **get_todays_meetings** or **create_calendar_event** tool to either show today's meetings or schedule a new one.\n   - If user wants to make a phone call, trigger the **make_phone_call** tool to trigger the calling agent ensuring to pass it the person name,type, phone number, and instructions for the call. the agent knows he is a personal assistant that makes phone calls. just provide the instructions of what to do on the call.\n\n3. **Interaction with Database**:\n   - Use the database to retrieve email or phone data.\n\n4. **General Flow**:\n   - Always maintain a conversational tone and guide the user by clarifying ambiguous commands or asking for missing information.\n   - Handle multiple commands in sequence if necessary (e.g., if the user asks for unread emails and to schedule a meeting in the same conversation).\n   - If the task involves a time-based component (e.g., \"add a task for tomorrow\"), ensure the date is parsed correctly and saved in the proper format.\n\n**Output Requirements**:\n- For emails: Display fetched unread emails or confirmation that an email has been sent.\n- For tasks: Show today's tasks or confirmation that a new task has been added.\n- For meetings: Show upcoming meetings for the day or confirmation that a new event has been created.\n- For phone calls: respond with phone call summary if successfull or not. \n\n**Examples**:\n1. **Unread Emails**:\n   - User Input: \"Show my unread emails\"\n   - Action: Trigger **retrieve_unread_emails** tool and display a list of unread emails from the user‚Äôs inbox.\n   - Response: \"Here are your unread emails: [Email 1, Email 2, ...]\"\n\n2. **Add Task**:\n   - User Input: \"Add a task to follow up with John tomorrow\"\n   - Action: Invoke **add_to_do_task** tool, passing the following query: \n    {\\\"title\\\":\\\"Follow up with John\\\",\\\"date\\\":\\\"tomorrow's date in UTC format\\\",\\\"Tags\\\":\\\"Work\\\"}\"\n   - Response: \"Task 'Follow up with John' has been added for tomorrow.\"\n\n3. **Create Meeting**:\n   - User Input: \"Schedule a meeting with the Amin at 3 PM today\"\n   - Action: First fetch amin's email from vector database.\n   - Then Trigger **create_calendar_event** tool, passing it the following query:\n      {\\\"start\\\":\\\"today's datetime at 3 pm in UTC ISO Format\\\",\\\"end\\\":\\\"half an hour after start time\\\",\\\"attendees\\\":\\\"Amin's email\\\",\\\"description\\\":\\\"Catchup\\\",\\\"summary\\\":\\\"Amin Catchup\\\"}\"\n    }\n   - Response: \"Your meeting with Amin has been scheduled for 3 PM today.\"\n\n4. **Send Email**:\n   - User Input: \"Send an email to Alice with the subject 'Project Update' and the message 'We are on track for the deadline.'\"\n   - Action: First fetch Alice's email from vector database.\n   - Invoke **send_email** tool passing it the following details: \n     {\\\"sendTo\\\":\\\"Alice's email\\\",\\\"subject\\\":\\\"Project Update\\\",\\\"message\\\":\\\"Hi Alice, We are on track for the deadline. \\\",\\\"ccList\\\":\\\"=\\\"}\"\n   - Response: \"Your email to Alice has been sent successfully.\"\n\n5. **Fetch Today's Meetings**:\n   - User Input: \"What meetings do I have today?\"\n   - Action: Trigger **get_todays_meetings** tool and retrieve a list of all meetings scheduled for today.\n   - Response: \"Here are your meetings for today: [Meeting 1, Meeting 2, ...]\"\n\n6. **Make a Phone Call**:\n   - User Input: \"call my car garage to book my car in for a service\"\n   - Action: First fetch car garage phone number from vector database.\n   - Invoke **make_phone_call** tool passing it the following details: \n     {\\\"first_name\\\":\\\"Garage Name\\\",\\\"type\\\":\\\"Car Garage\\\",\\\"instructions\\\":\\\"make a booking for the car for a full service package in the first available slot that the Garage has and find out what the cost is.\\\",\\\"phone_number\\\":\\\"+447123456789\\\"}\n   - Response: \"Full service has been booked for 3pm on friday\"\n\nIn this way, the AI agent interacts with the user‚Äôs requests while utilising the full range of tools and maintaining a smooth conversational experience.\nToday's date is {{ $('Edit Fields').item.json.today }}\nMake sure you use UTC ISO Format for all the dates when calling the tools. ",
            "returnIntermediateSteps": true
          }
        },
        "id": "2b19fb76-6899-4089-aade-5cd47f87feb5",
        "name": "AI Agent",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 1.6,
        "position": [
          1020,
          640
        ],
        "retryOnFail": true,
        "maxTries": 2
      },
      {
        "parameters": {
          "resource": "audio",
          "operation": "transcribe",
          "binaryPropertyName": "=data",
          "options": {}
        },
        "id": "cf065e93-35ec-404e-8987-21473d64b389",
        "name": "OpenAI",
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "typeVersion": 1.4,
        "position": [
          660,
          460
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "pineconeIndex": {
            "__rl": true,
            "value": "ai-agent",
            "mode": "list",
            "cachedResultName": "ai-agent"
          },
          "options": {
            "pineconeNamespace": "contacts-data"
          }
        },
        "id": "25301016-a5c7-4463-84bd-252ecf97a433",
        "name": "Pinecone Vector Store",
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "typeVersion": 1,
        "position": [
          820,
          1140
        ],
        "credentials": {
          "pineconeApi": {
            "id": "C6RNMwBuBU7mfDdf",
            "name": "PineconeApi account"
          }
        }
      }
    ],
    "pinData": {},
    "connections": {
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "send_email": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "retrieve_unread_emails": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "get_todays_meetings": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "create_calendar_event": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "add_to_do_task": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "get_todays_tasks": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "database": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "database",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Trigger": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram1": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields1": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If": {
        "main": [
          [
            {
              "node": "Telegram1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "make_phone_call": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI": {
        "main": [
          [
            {
              "node": "Edit Fields1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pinecone Vector Store": {
        "ai_vectorStore": [
          [
            {
              "node": "database",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "25e6af99-d03e-407c-9f0f-8092788b303a",
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "86d0b539cdbfaefdd305e9f4d9320d6449af6a05b20f421bc7ca5b2501068fb2"
    },
    "id": "ZMIEl36AqloaQad6",
    "tags": [
      {
        "createdAt": "2024-12-13T16:19:39.936Z",
        "updatedAt": "2024-12-13T16:19:39.936Z",
        "id": "HfDKxhOjSIjQqoFK",
        "name": "Agent"
      }
    ]
  }