{
    "name": "Presente Natal- 01 Assistents Ana",
    "nodes": [
      {
        "parameters": {
          "resource": "media",
          "operation": "mediaUrlGet",
          "mediaGetId": "={{ $json.audio.id }}",
          "requestOptions": {}
        },
        "id": "58ed2381-74f6-4dba-b461-f20f76fbc920",
        "name": "Get Audio URL",
        "type": "n8n-nodes-base.whatsApp",
        "position": [
          460,
          460
        ],
        "typeVersion": 1,
        "credentials": {
          "whatsAppApi": {
            "id": "smgOt7TH9cJeQz1I",
            "name": "WhatsApp account"
          }
        }
      },
      {
        "parameters": {
          "resource": "media",
          "operation": "mediaUrlGet",
          "mediaGetId": "={{ $json.image.id }}",
          "requestOptions": {}
        },
        "id": "4ec1c561-e0eb-4515-9e97-3448f3877ff1",
        "name": "Get Image URL",
        "type": "n8n-nodes-base.whatsApp",
        "position": [
          480,
          680
        ],
        "typeVersion": 1,
        "credentials": {
          "whatsAppApi": {
            "id": "smgOt7TH9cJeQz1I",
            "name": "WhatsApp account"
          }
        }
      },
      {
        "parameters": {
          "url": "={{ $json.url }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "whatsAppApi",
          "options": {}
        },
        "id": "cfffb1c0-f7d0-4a0a-a9a4-abedf77668fb",
        "name": "Download Audio",
        "type": "n8n-nodes-base.httpRequest",
        "position": [
          760,
          460
        ],
        "typeVersion": 4.2,
        "credentials": {
          "whatsAppApi": {
            "id": "smgOt7TH9cJeQz1I",
            "name": "WhatsApp account"
          }
        }
      },
      {
        "parameters": {
          "url": "={{ $json.url }}",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "whatsAppApi",
          "options": {}
        },
        "id": "7c38314a-17e2-4ed2-a294-7e77bc056570",
        "name": "Download Image",
        "type": "n8n-nodes-base.httpRequest",
        "position": [
          640,
          680
        ],
        "typeVersion": 4.2,
        "credentials": {
          "whatsAppApi": {
            "id": "smgOt7TH9cJeQz1I",
            "name": "WhatsApp account"
          }
        }
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "d990cbd6-a408-4ec4-a889-41be698918d9",
                "name": "message_type",
                "type": "string",
                "value": "={{ $('Split out message').item.json.type }}"
              },
              {
                "id": "23b785c3-f38e-4706-80b7-51f333bba3bd",
                "name": "message_text",
                "type": "string",
                "value": "={{ $json.text }}"
              },
              {
                "id": "6e83f9a7-cf75-4182-b2d2-3151e8af76b9",
                "name": "from",
                "type": "string",
                "value": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}"
              },
              {
                "id": "da4b602a-28ca-4b0d-a747-c3d3698c3731",
                "name": "message_caption",
                "type": "string",
                "value": "={{ $('Identify and ReRoute Message Types').item.json.video && $('Identify and ReRoute Message Types').item.json.video.caption || '' }}\n{{ $('Identify and ReRoute Message Types').item.json.image && $('Identify and ReRoute Message Types').item.json.image.caption || ''}}\n{{ $('Identify and ReRoute Message Types').item.json.audio && $('Identify and ReRoute Message Types').item.json.audio.caption || ''}}"
              }
            ]
          },
          "options": {}
        },
        "id": "68fa0a17-b2ea-4642-8444-1f20d36358fb",
        "name": "Get User's Message",
        "type": "n8n-nodes-base.set",
        "position": [
          1180,
          680
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "amount": 0
        },
        "id": "f86f6f59-1501-4aec-8a6a-7221b3a1b1ba",
        "name": "Get Text",
        "type": "n8n-nodes-base.wait",
        "position": [
          480,
          1000
        ],
        "webhookId": "99b49c83-d956-46d2-b8d3-d65622121ad9",
        "typeVersion": 1.1
      },
      {
        "parameters": {
          "operation": "send",
          "phoneNumberId": "266511473204092",
          "recipientPhoneNumber": "={{ $('WhatsApp Trigger1').item.json.messages[0].from }}",
          "textBody": "={{ $json.output }}",
          "additionalFields": {},
          "requestOptions": {}
        },
        "id": "c7faffdd-b2d2-42b6-a9cf-38dc272c86e1",
        "name": "Respond to User",
        "type": "n8n-nodes-base.whatsApp",
        "position": [
          1980,
          680
        ],
        "typeVersion": 1,
        "credentials": {
          "whatsAppApi": {
            "id": "smgOt7TH9cJeQz1I",
            "name": "WhatsApp account"
          }
        }
      },
      {
        "parameters": {
          "updates": [
            "messages"
          ]
        },
        "id": "88e4ab0a-cbd2-40b3-8f57-a33d0654fb59",
        "name": "WhatsApp Trigger1",
        "type": "n8n-nodes-base.whatsAppTrigger",
        "position": [
          -300,
          660
        ],
        "webhookId": "0b1b3a9b-2f6a-4f5a-8385-6365d96f4802",
        "typeVersion": 1,
        "credentials": {
          "whatsAppTriggerApi": {
            "id": "WF9I4LjPlsM8mXYC",
            "name": "WhatsApp OAuth account"
          }
        }
      },
      {
        "parameters": {
          "model": "gpt-4o-2024-08-06",
          "options": {}
        },
        "id": "e6b16b7c-4361-4163-a2b8-412fb9f2c1c0",
        "name": "OpenAI Chat Model5",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "position": [
          800,
          820
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "482cc909-c15b-43f6-9418-84db0e3c053d",
        "name": "OpenAI Chat Model",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1,
        "position": [
          800,
          1140
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "sessionIdType": "customKey",
          "sessionKey": "={{ $('WhatsApp Trigger1').item.json.contacts[0].wa_id }}",
          "tableName": "n8n_personalagent_chat_histories",
          "contextWindowLength": 15
        },
        "id": "9dbf6c22-3c5e-44d4-98f4-2de26375e3be",
        "name": "Postgres Chat Memory",
        "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
        "typeVersion": 1.1,
        "position": [
          1260,
          1220
        ],
        "credentials": {
          "postgres": {
            "id": "2mryL8kPGhMHlUuZ",
            "name": "Postgres account"
          }
        }
      },
      {
        "parameters": {
          "name": "contacts_data",
          "description": "Retrieves information about contacts and associated email addresses, templates and more.",
          "topK": 8
        },
        "id": "42b5a95b-7e2c-4914-8274-cfda6576330a",
        "name": "Vector Store Tool",
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "typeVersion": 1,
        "position": [
          2240,
          960
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "321c8078-5df0-46a9-9e35-c8791ba6fbdf",
        "name": "Embeddings OpenAI",
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "typeVersion": 1.1,
        "position": [
          2180,
          1220
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "model": "gpt-4o",
          "options": {}
        },
        "id": "46a02d84-94ea-4a91-a8e2-02a12839e84e",
        "name": "OpenAI Chat Model2",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1,
        "position": [
          1120,
          1220
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "1432478c-34a7-46eb-918d-a4707a7493bc",
        "name": "OpenAI Chat Model3",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1,
        "position": [
          2500,
          1120
        ],
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "ec2e7c99-3177-4d17-9c7b-588c0299c329",
        "name": "SerpAPI",
        "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
        "typeVersion": 1,
        "position": [
          2020,
          1220
        ],
        "credentials": {
          "serpApi": {
            "id": "x4lVJiqCVGyPHOIA",
            "name": "[SERP][AUTOTRAFFIC]"
          }
        }
      },
      {
        "parameters": {
          "fieldToSplitOut": "messages",
          "options": {}
        },
        "id": "4b86ebfd-4bde-4ddb-80c4-c7f21640e2b2",
        "name": "Split out message",
        "type": "n8n-nodes-base.splitOut",
        "position": [
          -80,
          660
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "operation": "getAll",
          "calendar": {
            "__rl": true,
            "value": "frjimenez2009@gmail.com",
            "mode": "list",
            "cachedResultName": "frjimenez2009@gmail.com"
          },
          "limit": "={{ $fromAI(\"Limit\") }}",
          "options": {
            "timeMin": "={{ $fromAI(\"After\") }}",
            "timeMax": "={{ $fromAI(\"Before\") }}"
          }
        },
        "id": "71ba0c3e-6a17-4442-94d4-b2a4d9bb62da",
        "name": "Get Calendar Events",
        "type": "n8n-nodes-base.googleCalendarTool",
        "typeVersion": 1.2,
        "position": [
          1400,
          1220
        ],
        "credentials": {
          "googleCalendarOAuth2Api": {
            "id": "fOmP3pN8kjBnUS9Q",
            "name": "Google Calendar account"
          }
        }
      },
      {
        "parameters": {
          "calendar": {
            "__rl": true,
            "value": "frjimenez2009@gmail.com",
            "mode": "list",
            "cachedResultName": "frjimenez2009@gmail.com"
          },
          "start": "={{ $fromAI('start_date', 'The start time of the event in ISO format', 'string') }}",
          "end": "={{ $fromAI('end_date', 'The end time of the event in ISO format', 'string') }}",
          "additionalFields": {
            "attendees": [
              "={{ $fromAI('attendees', 'Email addresses of attendees (comma-separated)', 'string') }}"
            ],
            "description": "={{ $fromAI('description', 'Details or agenda for the event', 'string') }}",
            "summary": "={{ $fromAI('title', 'Specify the title of the event', 'string') }}"
          }
        },
        "id": "d7cd40fa-ceb6-4d7f-a292-b5faaa990ae9",
        "name": "Create Calendar Events",
        "type": "n8n-nodes-base.googleCalendarTool",
        "typeVersion": 1.2,
        "position": [
          1540,
          1220
        ],
        "credentials": {
          "googleCalendarOAuth2Api": {
            "id": "fOmP3pN8kjBnUS9Q",
            "name": "Google Calendar account"
          }
        }
      },
      {
        "parameters": {
          "operation": "getAll",
          "limit": "={{ $fromAI('limit', 'the number of emails to retrieve, max of 3') }}",
          "simple": false,
          "filters": {
            "readStatus": "unread",
            "receivedAfter": "={{ $fromAI('received_after', 'Retrieve emails received after the current date, given a period specified by user if any. This is calculated dynamically based on the current date.', 'string') }}",
            "receivedBefore": "={{ $fromAI('received_before', 'Retrieve emails received before the current time today. This is calculated dynamically based on the current date.', 'string') }}"
          },
          "options": {}
        },
        "id": "efb1abd3-2a9e-4da0-bdbf-a9023af7e642",
        "name": "Recieve Multiple Emails",
        "type": "n8n-nodes-base.gmailTool",
        "typeVersion": 2.1,
        "position": [
          1700,
          1220
        ],
        "webhookId": "ee66615f-8ca6-4b86-bb55-56b1d30bb388",
        "credentials": {
          "gmailOAuth2": {
            "id": "10EGIRyWTSWt5Q27",
            "name": "Gmail account"
          }
        }
      },
      {
        "parameters": {
          "sendTo": "={{ $fromAI('email_send_to', 'The email recipient', 'string') }}",
          "subject": "={{ $fromAI('email_subject', 'The subject of the email', 'string') }}",
          "emailType": "text",
          "message": "={{ $fromAI('email_content', 'The content of the email message', 'string') }}",
          "options": {
            "appendAttribution": false
          }
        },
        "id": "64ed1c4d-04b0-4e7f-9d61-d7f2647bf3ce",
        "name": "Create and Approve Email",
        "type": "n8n-nodes-base.gmailTool",
        "typeVersion": 2.1,
        "position": [
          1860,
          1220
        ],
        "webhookId": "83bbb034-9202-415a-a146-0952b3716c6e",
        "notesInFlow": false,
        "credentials": {
          "gmailOAuth2": {
            "id": "10EGIRyWTSWt5Q27",
            "name": "Gmail account"
          }
        }
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.type == 'audio' && Boolean($json.audio) }}",
                      "rightValue": "audio"
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "Audio Message"
              },
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "82aa5ff4-c9b6-4187-a27e-c7c5d9bfdda0",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.type == 'video' && Boolean($json.video) }}",
                      "rightValue": ""
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "Video Message"
              },
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "05b30af4-967b-4824-abdc-84a8292ac0e5",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.type == 'image' && Boolean($json.image) }}",
                      "rightValue": ""
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "Image Message"
              }
            ]
          },
          "options": {
            "fallbackOutput": "extra",
            "renameFallbackOutput": "Text Message"
          }
        },
        "id": "f0144a19-efdb-4ff6-b204-3da726a535d8",
        "name": "Identify and ReRoute Message Types",
        "type": "n8n-nodes-base.switch",
        "position": [
          200,
          660
        ],
        "typeVersion": 3.2
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "Here is an image sent by the user. Describe the image and transcribe any text visible in the image. Put in as much detail as possible.",
          "messages": {
            "messageValues": [
              {
                "type": "HumanMessagePromptTemplate",
                "messageType": "imageBinary"
              }
            ]
          }
        },
        "id": "21ca50bf-1543-4318-aca3-23328569cd9e",
        "name": "Image Explainer",
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "position": [
          780,
          680
        ],
        "typeVersion": 1.4
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $json.text.body }}",
          "messages": {
            "messageValues": [
              {
                "message": "Summarize the user's message succinctly."
              }
            ]
          }
        },
        "id": "f246e890-3138-4881-a8ed-17e9ed2439dc",
        "name": "Text Summarizer",
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "position": [
          780,
          1000
        ],
        "typeVersion": 1.4
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=The user sent the following message\nmessage type: {{ $json.message_type }}\nmessage text or description:\n```{{ $json.message_text }}```\n{{ $json.message_caption ? `message caption: ${$json.message_caption.trim()}` : '' }}",
          "options": {
            "systemMessage": "=# **Role:**\nYou are a highly efficient and intelligent personal assistant, responsible for managing calendar events, emails, and communication tasks seamlessly.\n\n# **Primary Tasks:**\n\n1. **Retrieve Calendar Events**  \n   - Use the **\"Get Events\"** tool to fetch calendar events based on user instructions.  \n   - Handle queries such as:\n     - \"Retrieve today’s events\"\n     - \"Get tomorrow’s meetings\"\n   - Include details like:\n     - Event name, start and end time, location, video meeting link (if available), and participants’ names/emails.  \n   - Present results in a clear format:\n     ```\n     Event: [Event Name]  \n     Time: [Start Time] - [End Time]  \n     Location: [Location]  \n     Video Link: [Video Link]  \n     Participants:  \n     - [Name 1] ([Email 1])  \n     - [Name 2] ([Email 2])  \n     ```\n\n2. **Create Calendar Events**  \n   - Use the **\"Create Event\"** tool to schedule new events.  \n   - Inputs include:  \n     - Title, start date, end date, attendees, and description.  \n   - Resolve attendee names to email addresses using the **vector store tool** for contact references.  \n   - Example: For \"Add Sarah to the meeting,\" retrieve \"Sarah Thompson\" and her associated email from the vector store.  \n   - Confirm event details with the user before finalizing:\n     ```\n     Title: [Event Title]  \n     Time: [Start Date/Time] to [End Date/Time]  \n     Attendees: [List of Names/Emails]  \n     Description: [Event Description]  \n     ```\n   - If no end time or duration is stated, please assume the event will last 1 hour.\n\n\n3. **Retrieve Emails with Summaries**  \n   - Use the **\"Receive Many Emails\"** tool to fetch emails dynamically based on the user’s request:\n     - Examples: \"Get today’s emails,\" \"Show emails from last week.\"  \n   - Summarize the retrieved emails into a user-friendly list:\n     ```\n     Email 1:  \n     - Subject: [Subject]  \n     - From: [Sender Name/Email]  \n     - Summary: [Brief description of email content]  \n     ```\n   - Allow users to select a specific email for further action.\n\n4. **Send Emails Using Templates**  \n   - Use the **\"Send & Approve Email\"** tool to send or reply to emails based on user instructions.  \n   - Leverage the **vector store tool** for predefined templates.  \n     - Example: If the user says, \"Send a meeting request to John,\" retrieve the **\"Meeting Request\"** template from the vector store.  \n   - Dynamically populate the template using user-provided details (e.g., recipient, date, and time):\n     ```\n     Template: Meeting Request  \n     Greeting: Hi [Recipient’s Name],  \n     Purpose: [Reason for the email, dynamically populated].  \n     Closing: Best regards, [Your Name].  \n     ```\n   - Confirm with the user before sending:\n     ```\n     To: [Recipient’s Email]  \n     Subject: [Subject Line]  \n     Body: [Draft Content]  \n     ```\n   - For replying to specific emails, incorporate context dynamically and confirm the draft with the user.\n\n# **Tool Usage**:\n- Dynamically invoke:\n  - **Vector Store Tool**: Retrieve contact details (e.g., names to email mappings) and predefined templates for emails.  \n  - **Calendar Tools**: Fetch or create calendar events.  \n  - **Gmail Tool**: Fetch, summarize, reply to, or send emails.  \n  - **SERP API Tool**: Perform real-time internet searches and provide summarized results.\n\n# **Ambiguity Handling**:\n1. Resolve vague references (e.g., \"Sarah\") by checking the **vector store tool** for the closest match.  \n   - Example: \"Invite Sarah to the meeting\" → Resolve to \"Sarah Thompson\" (frjimenez2009@gmail.com).  \n2. If conflicting options exist, ask the user for clarification.  \n\n# **Examples**:\n\n## **Event Retrieval Example**\n**User Request**: \"Retrieve today’s events.\"  \n**Response**:\n```\n1. Event: Weekly Team Sync  \n   Time: 10:00 AM - 11:00 AM  \n   Location: FG Labs HQ  \n   Video Link: [Meet Link]  \n   Participants:  \n   - Fran Jimenez (frjimenez2009@gmail.com)  \n   - Frank Nillard (contact@fglabs.co)  \n\n2. Event: Client Presentation  \n   Time: 3:00 PM - 4:00 PM  \n   Location: Zoom  \n   Participants:  \n   - Sarah Thompson (frank@fglabs.co)  \n   - David Lee (frjimenez2009@hotmail.com)  \n```\n\n## **Email Summary Example**\n**User Request**: \"Get emails received today.\"  \n**Response**:\n```\n1. Email 1:  \n   - Subject: Collaboration Opportunity  \n   - From: Sarah Thompson (frank@fglabs.co)  \n   - Summary: \"Proposal to collaborate on a video project for next week.\"  \n\n2. Email 2:  \n   - Subject: Meeting Confirmation  \n   - From: Emily White (fglabs2024@gmail.com)  \n   - Summary: \"Confirmation of tomorrow’s meeting at 10:00 AM. Requested agenda input.\"  \n```\n\n---\n\n### Final Notes:\n- **Image Understanding**: You will be given descriptions of images so acknowledge that you understand them and ask the user what do they want to do next with this information.\n- Make sure that the emails you send have the name Frank at the end. Do not leave any square brackets.\n- **Today's Date**:  \n  {{ new Date().toISOString() }}\n"
          }
        },
        "id": "5b788955-2153-44bb-a54c-fab9162c279e",
        "name": "Assistent Ana",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          1420,
          680
        ],
        "typeVersion": 1.6
      },
      {
        "parameters": {
          "resource": "audio",
          "operation": "transcribe",
          "options": {}
        },
        "id": "542490e2-f040-488e-a690-86936b47743f",
        "name": "Audio Transcriber",
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "position": [
          920,
          460
        ],
        "typeVersion": 1.5,
        "credentials": {
          "openAiApi": {
            "id": "uzWlw2HvU7e9SDKz",
            "name": "CONEXAO_AULA_OPENAI"
          }
        }
      },
      {
        "parameters": {
          "tableName": {
            "__rl": true,
            "value": "documents",
            "mode": "list",
            "cachedResultName": "documents"
          },
          "options": {
            "queryName": "match_documents"
          }
        },
        "id": "eb15727b-5d20-4c95-86a4-35039822c459",
        "name": "n8n_demo",
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "typeVersion": 1,
        "position": [
          2180,
          1080
        ],
        "credentials": {
          "supabaseApi": {
            "id": "cxNKtbYtw4MM7IvT",
            "name": "Autotraffic"
          }
        }
      }
    ],
    "pinData": {},
    "connections": {
      "Get Image URL": {
        "main": [
          [
            {
              "node": "Download Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Audio": {
        "main": [
          [
            {
              "node": "Audio Transcriber",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Image": {
        "main": [
          [
            {
              "node": "Image Explainer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get User's Message": {
        "main": [
          [
            {
              "node": "Assistent Ana",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Text": {
        "main": [
          [
            {
              "node": "Text Summarizer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "WhatsApp Trigger1": {
        "main": [
          [
            {
              "node": "Split out message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model5": {
        "ai_languageModel": [
          [
            {
              "node": "Image Explainer",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Text Summarizer",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Postgres Chat Memory": {
        "ai_memory": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Tool": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "n8n_demo",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model3": {
        "ai_languageModel": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get Audio URL": {
        "main": [
          [
            {
              "node": "Download Audio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "SerpAPI": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Split out message": {
        "main": [
          [
            {
              "node": "Identify and ReRoute Message Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Calendar Events": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Create Calendar Events": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Recieve Multiple Emails": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Create and Approve Email": {
        "ai_tool": [
          [
            {
              "node": "Assistent Ana",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Identify and ReRoute Message Types": {
        "main": [
          [
            {
              "node": "Get Audio URL",
              "type": "main",
              "index": 0
            }
          ],
          [],
          [
            {
              "node": "Get Image URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Image Explainer": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Text Summarizer": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Assistent Ana": {
        "main": [
          [
            {
              "node": "Respond to User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Audio Transcriber": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "n8n_demo": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "525d1d62-9bb4-4c72-9da8-168bd1195f34",
    "meta": {
      "instanceId": "86d0b539cdbfaefdd305e9f4d9320d6449af6a05b20f421bc7ca5b2501068fb2"
    },
    "id": "mihjwfXdPbDLyqJ5",
    "tags": []
  }